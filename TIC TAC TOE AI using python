import tkinter as tk
from tkinter import messagebox
import math

HUMAN = 'X'
AI = 'O'
EMPTY = ' '

class TicTacToe:
    def __init__(self, root):
        self.root = root
        self.root.title("Tic-Tac-Toe AI (Minimax)")
        self.board = [EMPTY for _ in range(9)]
        self.buttons = []
        self.create_widgets()
        self.current_turn = HUMAN

    def create_widgets(self):
        frame = tk.Frame(self.root)
        frame.pack()
        for i in range(9):
            button = tk.Button(frame, text='', font=('Arial', 36), width=5, height=2,
                               command=lambda i=i: self.human_move(i))
            button.grid(row=i // 3, column=i % 3)
            self.buttons.append(button)

        self.reset_button = tk.Button(self.root, text="Reset Game", font=('Arial', 14), command=self.reset_game)
        self.reset_button.pack(pady=10)

    def reset_game(self):
        self.board = [EMPTY for _ in range(9)]
        for button in self.buttons:
            button.config(text='', state=tk.NORMAL)
        self.current_turn = HUMAN

    def human_move(self, index):
        if self.board[index] == EMPTY:
            self.board[index] = HUMAN
            self.buttons[index].config(text=HUMAN)
            if self.check_winner(HUMAN):
                self.end_game("You win! 🎉")
                return
            elif self.is_full():
                self.end_game("It's a draw 🤝")
                return
            self.root.after(500, self.ai_move)

    def ai_move(self):
        move = self.best_move()
        if move is not None:
            self.board[move] = AI
            self.buttons[move].config(text=AI)
            if self.check_winner(AI):
                self.end_game("AI wins! 💻")
            elif self.is_full():
                self.end_game("It's a draw 🤝")

    def end_game(self, message):
        for button in self.buttons:
            button.config(state=tk.DISABLED)
        messagebox.showinfo("Game Over", message)

    def check_winner(self, player):
        win_patterns = [
            [0,1,2],[3,4,5],[6,7,8],   # Rows
            [0,3,6],[1,4,7],[2,5,8],   # Columns
            [0,4,8],[2,4,6]            # Diagonals
        ]
        return any(all(self.board[i] == player for i in pattern) for pattern in win_patterns)

    def is_full(self):
        return EMPTY not in self.board

    def best_move(self):
        best_score = -math.inf
        move = None
        for i in range(9):
            if self.board[i] == EMPTY:
                self.board[i] = AI
                score = self.minimax(0, False)
                self.board[i] = EMPTY
                if score > best_score:
                    best_score = score
                    move = i
        return move

    def minimax(self, depth, is_maximizing):
        if self.check_winner(AI):
            return 10 - depth
        elif self.check_winner(HUMAN):
            return depth - 10
        elif self.is_full():
            return 0

        if is_maximizing:
            best_score = -math.inf
            for i in range(9):
                if self.board[i] == EMPTY:
                    self.board[i] = AI
                    score = self.minimax(depth + 1, False)
                    self.board[i] = EMPTY
                    best_score = max(best_score, score)
            return best_score
        else:
            best_score = math.inf
            for i in range(9):
                if self.board[i] == EMPTY:
                    self.board[i] = HUMAN
                    score = self.minimax(depth + 1, True)
                    self.board[i] = EMPTY
                    best_score = min(best_score, score)
            return best_score


if __name__ == "__main__":
    root = tk.Tk()
    game = TicTacToe(root)
    root.mainloop()
